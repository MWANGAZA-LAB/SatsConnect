name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.set_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set version
      id: set_version
      run: echo "version=${GITHUB_REF_NAME:-${{ github.event.inputs.version }}}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        name: Release ${{ steps.set_version.outputs.version }}
        body: |
          ## SatsConnect ${{ steps.set_version.outputs.version }}

          ### What's New
          - üöÄ Production-ready Bitcoin Lightning wallet
          - üí∞ MPesa integration for KES ‚Üî BTC
          - üì± Cross-platform mobile app (iOS/Android)
          - üîí Enterprise-grade security
          - üåç Built for Africa
          
          ### Components
          - **Rust gRPC Engine**: High-performance Lightning node
          - **Node.js Orchestrator**: REST API and fiat integrations
          - **React Native App**: Mobile wallet interface

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Rust Engine image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/rust-engine
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rust-engine:${{ needs.create-release.outputs.version }}

    - name: Build and push Node Orchestrator image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/node-orchestrator
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-orchestrator:${{ needs.create-release.outputs.version }}

  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install dependencies
      run: |
        cd mobile
        npm ci

    - name: Install Expo CLI
      run: npm install -g @expo/cli@latest

    - name: Build Expo bundle
      run: |
        cd mobile
        npx expo export --platform all
      continue-on-error: true

    - name: Upload mobile artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mobile-bundles
        path: mobile/dist/
        retention-days: 30
