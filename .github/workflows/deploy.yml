name: Deploy SatsConnect

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [rust-engine, node-orchestrator]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'

    environment:
      name: staging
      url: https://staging.satsconnect.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # Add smoke tests here
        # Example: curl -f https://staging.satsconnect.app/health

    - name: Notify deployment success
      run: |
        echo "‚úÖ Staging deployment completed successfully!"
        echo "üåê Staging URL: https://staging.satsconnect.app"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'

    environment:
      name: production
      url: https://satsconnect.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

    - name: Run production health checks
      run: |
        echo "üè• Running production health checks..."
        # Add health checks here
        # Example: curl -f https://satsconnect.app/health

    - name: Notify deployment success
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "üåê Production URL: https://satsconnect.app"

  # Mobile app deployment
  deploy-mobile:
    name: Deploy Mobile App
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'mobile/package-lock.json'

    - name: Install dependencies
      run: |
        cd mobile
        npm ci

    - name: Install EAS CLI
      run: npm install -g @expo/eas-cli

    - name: Login to EAS
      run: |
        cd mobile
        eas login --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    - name: Build and submit to app stores
      run: |
        cd mobile
        # Build for production
        eas build --platform all --profile production --non-interactive
        
        # Submit to app stores
        eas submit --platform all --profile production --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Rollback deployment
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back deployment..."
        # Add rollback commands here
        # Example: kubectl rollout undo deployment/satsconnect-orchestrator
        # Example: docker-compose -f docker-compose.yml down && docker-compose -f docker-compose.yml up -d

    - name: Notify rollback
      run: |
        echo "‚ö†Ô∏è Deployment rolled back due to failure"
