version: '3.8'

services:
  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: satsconnect-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-satsconnect_redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - satsconnect-network

  # Rust gRPC Engine
  rust-engine:
    build:
      context: ./backend/rust-engine
      dockerfile: Dockerfile
    container_name: satsconnect-rust-engine
    restart: unless-stopped
    ports:
      - "50051:50051"
    environment:
      - RUST_LOG=info
      - GRPC_PORT=50051
      - DATA_DIR=/app/data
    volumes:
      - rust_engine_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "netstat", "-an", "|", "grep", ":50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - satsconnect-network

  # Node.js Orchestrator
  node-orchestrator:
    build:
      context: ./backend/node-orchestrator
      dockerfile: Dockerfile
    container_name: satsconnect-orchestrator
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - RUST_ENGINE_GRPC_URL=rust-engine:50051
      - REDIS_URL=redis://:${REDIS_PASSWORD:-satsconnect_redis_password}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - MPESA_CONSUMER_KEY=${MPESA_CONSUMER_KEY}
      - MPESA_CONSUMER_SECRET=${MPESA_CONSUMER_SECRET}
      - MPESA_SHORTCODE=${MPESA_SHORTCODE}
      - MPESA_PASSKEY=${MPESA_PASSKEY}
      - AIRTIME_API_KEY=${AIRTIME_API_KEY}
      - AIRTIME_API_SECRET=${AIRTIME_API_SECRET}
    volumes:
      - orchestrator_logs:/app/logs
      - ./backend/node-orchestrator/.env.encrypted:/app/.env.encrypted:ro
      - ./backend/node-orchestrator/.config.key:/app/.config.key:ro
    depends_on:
      redis:
        condition: service_healthy
      rust-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - satsconnect-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: satsconnect-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - node-orchestrator
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - satsconnect-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: satsconnect-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - satsconnect-network

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: satsconnect-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - satsconnect-network

  # Log aggregation with ELK Stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: satsconnect-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - satsconnect-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: satsconnect-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - orchestrator_logs:/var/log/orchestrator:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - satsconnect-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: satsconnect-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - satsconnect-network

volumes:
  redis_data:
    driver: local
  rust_engine_data:
    driver: local
  orchestrator_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  satsconnect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16