version: '3.8'

services:
  # Redis for queue management
  redis:
    image: redis:7-alpine
    container_name: satsconnect-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust Lightning Engine
  rust-engine:
    build:
      context: ./backend/rust-engine
      dockerfile: Dockerfile
    container_name: satsconnect-rust-engine
    ports:
      - "50051:50051"
    volumes:
      - rust_data:/app/data
    environment:
      - RUST_LOG=info
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Node.js Orchestrator
  node-orchestrator:
    build:
      context: ./backend/node-orchestrator
      dockerfile: Dockerfile
    container_name: satsconnect-orchestrator
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - GRPC_ENGINE_URL=rust-engine:50051
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=24h
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CORS_ORIGIN=*
      - BCRYPT_ROUNDS=12
      # MPesa Configuration
      - MPESA_CONSUMER_KEY=${MPESA_CONSUMER_KEY}
      - MPESA_CONSUMER_SECRET=${MPESA_CONSUMER_SECRET}
      - MPESA_BUSINESS_SHORT_CODE=${MPESA_BUSINESS_SHORT_CODE:-174379}
      - MPESA_PASSKEY=${MPESA_PASSKEY}
      - MPESA_CALLBACK_URL=${MPESA_CALLBACK_URL}
      - MPESA_ENVIRONMENT=${MPESA_ENVIRONMENT:-sandbox}
      # Airtime Configuration
      - AIRTIME_PROVIDER=${AIRTIME_PROVIDER:-chimoney}
      - CHIMONEY_API_KEY=${CHIMONEY_API_KEY}
      - CHIMONEY_SUB_KEY=${CHIMONEY_SUB_KEY}
      - CHIMONEY_WEBHOOK_URL=${CHIMONEY_WEBHOOK_URL}
      # Queue Configuration
      - QUEUE_CONCURRENCY=5
      - QUEUE_RETRY_ATTEMPTS=3
    depends_on:
      redis:
        condition: service_healthy
      rust-engine:
        condition: service_healthy
    volumes:
      - orchestrator_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: satsconnect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - node-orchestrator
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: satsconnect-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: satsconnect-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped

volumes:
  redis_data:
  rust_data:
  orchestrator_logs:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: satsconnect-network
